WITH base_query AS (
SELECT
f.order_number,
f.order_date,
f.customer_key,
f.sales_amount,
f.quantity,
p.product_key,
p.product_name,
p.category,
p.subcategory,
p.cost
FROM anapro.sales f
LEFT JOIN anapro.products p
ON f.product_key = p.product_key
WHERE order_number IS NOT NULL
),

  product_aggregation AS (
SELECT 
product_key,
product_name,
category,
subcategory,
cost,
TIMESTAMPDIFF(month,MIN(order_date),MAX(order_date)) AS lifespan,
MAX(order_date) AS last_sale_date,
COUNT(DISTINCT order_number) AS total_orders,
COUNT(DISTINCT customer_key) AS total_customers,
SUM(sales_amount) AS total_sales,
SUM(quantity) AS total_quantity,
ROUND(avg(CAST(sales_amount AS FLOAT) / NULLIF(quantity,0)),1) AS avg_selling_price
from base_query
GROUP BY
product_key,
product_name,
category,
subcategory,
cost
)

SELECT 
product_key,
product_name,
category,
subcategory,
cost,
last_sale_date,
TIMESTAMPDIFF(month,last_sale_date,CURDATE()) AS recency_in_months,
CASE 
    WHEN total_sales > 50000 THEN 'High_performer'
    WHEN total_sales >= 10000 THEN 'Mid_range'
    ELSE 'Low_performer'
END AS product_segment,
lifespan,
total_orders,
total_sales,
total_quantity,
total_customers,
avg_selling_price,
CASE
    WHEN total_orders = 0 THEN 0
    ELSE total_sales / total_orders
END AS avg_order_revenue ,
CASE  
    WHEN lifespan = 0 THEN total_sales
    ELSE ROUND((total_sales /  lifespan),0)
END AS avg_monthly_revenue
from product_aggregation



